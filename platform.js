// ---------- M√ìDULO PRINCIPAL DE LA PLATAFORMA ----------

// ---------- DATOS DE LA PLATAFORMA ----------
const platformData = {
    units: [
        {
            id: 'tct',
            title: 'Teor√≠a Cl√°sica de los Tests',
            description: 'Fundamentos del modelo lineal cl√°sico y sus supuestos b√°sicos',
            icon: 'üìä',
            videoId: 'hriKlRXTF0A',
            progress: 0,
            bestScore: 0,
            attempts: 0,
            studyTime: 0
        },
        {
            id: 'confiabilidad',
            title: 'Confiabilidad',
            description: 'Consistencia y estabilidad de las mediciones psicom√©tricas',
            icon: 'üéØ',
            videoId: 'aeENe9swI8E',
            progress: 0,
            bestScore: 0,
            attempts: 0,
            studyTime: 0
        },
        {
            id: 'validez',
            title: 'Validez',
            description: 'Evaluaci√≥n de la evidencia de validez y constructo',
            icon: '‚úÖ',
            videoId: 'vrU6jJ80_UU',
            progress: 0,
            bestScore: 0,
            attempts: 0,
            studyTime: 0
        },
        {
            id: 'factorial',
            title: 'An√°lisis Factorial',
            description: 'Descubrimiento de estructuras latentes en los datos',
            icon: 'üîç',
            videoId: 'v_pD5lwpISI',
            progress: 0,
            bestScore: 0,
            attempts: 0,
            studyTime: 0
        },
        {
            id: 'baremacion',
            title: 'Baremaci√≥n',
            description: 'Estandarizaci√≥n y normalizaci√≥n de puntuaciones',
            icon: 'üìà',
            videoId: 'hl8LNar2oys',
            progress: 0,
            bestScore: 0,
            attempts: 0,
            studyTime: 0
        },
        {
            id: 'tri',
            title: 'Teor√≠a de Respuesta a los √çtems',
            description: 'Modelos modernos de medici√≥n y sus aplicaciones',
            icon: 'üßÆ',
            videoId: 'BRCeQo9SmSE',
            progress: 0,
            bestScore: 0,
            attempts: 0,
            studyTime: 0
        }
    ]
};

// ---------- BANCOS DE PREGUNTAS MEJORADOS ----------
const questionBanks = {
    tct: [
        {
            type: 'multiple-choice',
            question: '¬øCu√°l es la ecuaci√≥n fundamental de la Teor√≠a Cl√°sica de los Tests?',
            options: ['X = T √ó E', 'X = T + E', 'E = X + T', 'T = X - E'],
            answer: 'X = T + E',
            explanation: 'El modelo lineal cl√°sico establece que la puntuaci√≥n observada (X) es la suma de la puntuaci√≥n verdadera (T) y el error de medici√≥n (E).',
            source: 'Apuntes-TCT.pdf',
            difficulty: 'easy',
            icon: 'üìè',
            category: 'fundamentos'
        },
        {
            type: 'multiple-choice',
            question: '¬øQu√© representa la puntuaci√≥n verdadera (T) en la TCT?',
            options: ['La puntuaci√≥n emp√≠rica obtenida', 'El promedio hipot√©tico de puntuaciones bajo condiciones id√©nticas', 'El error sistem√°tico de medici√≥n', 'La varianza residual del test'],
            answer: 'El promedio hipot√©tico de puntuaciones bajo condiciones id√©nticas',
            explanation: 'La puntuaci√≥n verdadera se define como el valor esperado de las puntuaciones observadas si se aplicaran infinitas formas paralelas del test.',
            source: 'Apuntes-TCT.pdf',
            difficulty: 'easy',
            icon: 'üéØ',
            category: 'conceptos'
        },
        {
            type: 'multiple-choice',
            question: '¬øQu√© se asume sobre la media del error de medici√≥n en la TCT?',
            options: ['Es positiva', 'Es negativa', 'Es igual a cero', 'Depende del test'],
            answer: 'Es igual a cero',
            explanation: 'El modelo supone que los errores de medici√≥n son aleatorios y se anulan entre s√≠ en promedio.',
            source: 'Apuntes-TCT.pdf',
            difficulty: 'easy',
            icon: '‚öñÔ∏è',
            category: 'supuestos'
        },
        {
            type: 'multiple-choice',
            question: '¬øQu√© mide el coeficiente de confiabilidad (œÅ_XX‚Äô)?',
            options: ['La precisi√≥n de cada √≠tem', 'La proporci√≥n de varianza verdadera en la puntuaci√≥n total', 'La diferencia entre tests paralelos', 'La magnitud del error de estimaci√≥n'],
            answer: 'La proporci√≥n de varianza verdadera en la puntuaci√≥n total',
            explanation: 'La confiabilidad representa la proporci√≥n de la varianza total atribuible a diferencias reales en el rasgo medido.',
            source: 'Apuntes-TCT.pdf',
            difficulty: 'medium',
            icon: 'üìä',
            category: 'confiabilidad'
        },
        {
            type: 'multiple-choice',
            question: 'Si un test tiene una confiabilidad de 0.90, ¬øqu√© porcentaje de la varianza de las puntuaciones se debe al error de medici√≥n?',
            options: ['10%', '90%', '0%', '100%'],
            answer: '10%',
            explanation: 'La varianza de error es el complemento de la confiabilidad (1 - 0.90 = 0.10). Por lo tanto, el 10% de la varianza total es atribuible al error de medici√≥n.',
            source: 'Teor√≠a Cl√°sica de los Tests.pdf',
            difficulty: 'medium',
            icon: 'üìà',
            category: 'interpretacion'
        }
    ],
    confiabilidad: [
        {
            type: 'multiple-choice',
            question: '¬øC√≥mo se define el coeficiente de confiabilidad en t√©rminos de varianza?',
            options: ['La proporci√≥n de varianza verdadera sobre la varianza emp√≠rica', 'La proporci√≥n de varianza de error sobre la varianza emp√≠rica', 'La suma de la varianza verdadera y la de error', 'La correlaci√≥n entre el test y un criterio externo'],
            answer: 'La proporci√≥n de varianza verdadera sobre la varianza emp√≠rica',
            explanation: 'El coeficiente de confiabilidad (œÅxx\') representa qu√© parte de la variabilidad total en las puntuaciones observadas se debe a diferencias reales en el rasgo medido.',
            source: 'Teor√≠a Cl√°sica de los Tests.pdf',
            difficulty: 'hard',
            icon: 'üéØ',
            category: 'varianza'
        },
        {
            type: 'multiple-choice',
            question: 'Si un test tiene una confiabilidad de 0.90, ¬øqu√© porcentaje de la varianza de las puntuaciones se debe al error de medici√≥n?',
            options: ['10%', '90%', '0%', '100%'],
            answer: '10%',
            explanation: 'La varianza de error es el complemento de la confiabilidad (1 - 0.90 = 0.10). Por lo tanto, el 10% de la varianza total es atribuible al error de medici√≥n.',
            source: 'Teor√≠a Cl√°sica de los Tests.pdf',
            difficulty: 'medium',
            icon: 'üéØ',
            category: 'interpretacion'
        }
    ],
    validez: [
        {
            type: 'multiple-choice',
            question: 'Seg√∫n la concepci√≥n moderna y unitaria de la validez, ¬øqu√© es lo que se valida?',
            options: ['Las inferencias hechas a partir de las puntuaciones del test', 'El test en s√≠ mismo, como un objeto', '√önicamente el contenido de los √≠tems', 'La confiabilidad del instrumento'],
            answer: 'Las inferencias hechas a partir de las puntuaciones del test',
            explanation: 'La validez no es una propiedad intr√≠nseca del test, sino el grado en que la evidencia y la teor√≠a apoyan las interpretaciones y usos de las puntuaciones del test.',
            source: 'Validez.pdf',
            difficulty: 'hard',
            icon: '‚úÖ',
            category: 'concepto'
        }
    ],
    factorial: [
        {
            type: 'multiple-choice',
            question: '¬øCu√°l es el objetivo principal del An√°lisis Factorial Exploratorio (AFE)?',
            options: ['Descubrir una estructura subyacente en un conjunto de variables', 'Confirmar una estructura te√≥rica predefinida', 'Reducir datos a un √∫nico componente', 'Calcular la confiabilidad de un test'],
            answer: 'Descubrir una estructura subyacente en un conjunto de variables',
            explanation: 'El AFE es una t√©cnica "basada en los datos" que se utiliza en las primeras etapas de la investigaci√≥n para generar hip√≥tesis sobre cu√°ntos factores explican las correlaciones entre las variables observadas.',
            source: 'Gu√≠a Comprensiva del An√°lisis Factorial.pdf',
            difficulty: 'medium',
            icon: 'üîç',
            category: 'exploratorio'
        }
    ],
    baremacion: [
        {
            type: 'multiple-choice',
            question: '¬øCu√°l es el principal objetivo de transformar las puntuaciones directas de un test?',
            options: ['Facilitar su interpretaci√≥n ubicando a la persona en relaci√≥n a un grupo normativo', 'Aumentar la confiabilidad del test', 'Asegurar la validez de contenido', 'Hacer que las puntuaciones sean m√°s altas'],
            answer: 'Facilitar su interpretaci√≥n ubicando a la persona en relaci√≥n a un grupo normativo',
            explanation: 'Una puntuaci√≥n bruta (ej. 25 puntos) no significa nada por s√≠ sola. Al transformarla (ej. percentil 80), podemos entender la posici√≥n relativa del individuo en comparaci√≥n con el grupo de referencia.',
            source: 'Transformaci√≥n de Puntuaciones.pdf',
            difficulty: 'easy',
            icon: 'üìà',
            category: 'interpretacion'
        }
    ],
    tri: [
        {
            type: 'multiple-choice',
            question: 'Una limitaci√≥n clave de la TCT que la TRI resuelve es que las propiedades de los √≠tems...',
            options: ['son invariantes respecto a la muestra utilizada para estimarlas', 'dependen fuertemente de la muestra utilizada para estimarlas', 'solo se aplican a tests de inteligencia', 'son siempre las mismas que las del test completo'],
            answer: 'son invariantes respecto a la muestra utilizada para estimarlas',
            explanation: 'En TRI, la dificultad (b) o discriminaci√≥n (a) de un √≠tem son propiedades del √≠tem en s√≠, independientes de la muestra. En TCT, la dificultad depende de la muestra en que se calcula.',
            source: 'Las Teor√≠as de los Tests - Mu√±iz - 2010.pdf',
            difficulty: 'hard',
            icon: 'üßÆ',
            category: 'invarianza'
        }
    ]
};

// ---------- FLASHCARDS MEJORADAS ----------
const flashcardData = {
    tct: [
        {
            front: '¬øCu√°l es la ecuaci√≥n central de la Teor√≠a Cl√°sica de los Tests?',
            back: 'El modelo lineal cl√°sico se expresa como X = T + E, donde X es la puntuaci√≥n observada, T la puntuaci√≥n verdadera y E el error de medici√≥n.',
            source: 'Apuntes-TCT.pdf',
            difficulty: 'easy',
            icon: 'üìè',
            category: 'fundamentos'
        },
        {
            front: '¬øQu√© representa la puntuaci√≥n verdadera (T)?',
            back: 'Es el valor esperado de las puntuaciones observadas que una persona obtendr√≠a si realizara infinitas versiones paralelas del mismo test.',
            source: 'Apuntes-TCT.pdf',
            difficulty: 'easy',
            icon: 'üéØ',
            category: 'conceptos'
        },
        {
            front: '¬øQu√© significa que el error de medici√≥n tenga media cero?',
            back: 'Significa que los errores son aleatorios y, en promedio, se anulan entre s√≠ en una poblaci√≥n, garantizando que no sesgan las puntuaciones.',
            source: 'Apuntes-TCT.pdf',
            difficulty: 'easy',
            icon: '‚öñÔ∏è',
            category: 'supuestos'
        }
    ],
    confiabilidad: [
        {
            front: '¬øQu√© expresa el coeficiente de confiabilidad (œÅ_XX‚Äô)?',
            back: 'Mide la proporci√≥n de la varianza total de las puntuaciones que se debe a diferencias reales en el rasgo medido, y no al error aleatorio.',
            source: 'Apuntes-TCT.pdf',
            difficulty: 'medium',
            icon: 'üìä',
            category: 'varianza'
        },
        {
            front: '¬øC√≥mo se calcula el Error Est√°ndar de Medici√≥n (EEM)?',
            back: 'EEM = DE √ó ‚àö(1 - rxx), donde DE es la desviaci√≥n est√°ndar del test y rxx es el coeficiente de confiabilidad.',
            source: 'Teor√≠a Cl√°sica de los Tests.pdf',
            difficulty: 'medium',
            icon: 'üéØ',
            category: 'calculo'
        }
    ],
    validez: [
        {
            front: '¬øQu√© es la validez de contenido?',
            back: 'Eval√∫a si los √≠tems del test representan adecuadamente el dominio o constructo que se pretende medir, asegurando la relevancia y representatividad.',
            source: 'Validez.pdf',
            difficulty: 'medium',
            icon: '‚úÖ',
            category: 'contenido'
        }
    ],
    factorial: [
        {
            front: '¬øCu√°l es la diferencia entre AFE y AFC?',
            back: 'El An√°lisis Factorial Exploratorio (AFE) descubre estructuras sin hip√≥tesis previas, mientras que el Confirmatorio (AFC) prueba estructuras te√≥ricas predefinidas.',
            source: 'Gu√≠a Comprensiva del An√°lisis Factorial.pdf',
            difficulty: 'medium',
            icon: 'üîç',
            category: 'tipos'
        }
    ],
    baremacion: [
        {
            front: '¬øQu√© es la estandarizaci√≥n de puntuaciones?',
            back: 'Proceso de transformar puntuaciones brutas en puntuaciones derivadas con media y desviaci√≥n est√°ndar conocidas, facilitando la interpretaci√≥n.',
            source: 'Transformaci√≥n de Puntuaciones.pdf',
            difficulty: 'easy',
            icon: 'üìà',
            category: 'proceso'
        }
    ],
    tri: [
        {
            front: '¬øQu√© es la Curva Caracter√≠stica del √çtem (CCI)?',
            back: 'Funci√≥n matem√°tica que relaciona el nivel de habilidad (Œ∏) con la probabilidad de responder correctamente un √≠tem, representando su funcionamiento.',
            source: 'Las Teor√≠as de los Tests - Mu√±iz - 2010.pdf',
            difficulty: 'hard',
            icon: 'üßÆ',
            category: 'funcion'
        }
    ]
};

// ---------- SISTEMA DE ESTADO DE LA PLATAFORMA ----------
class PlatformState {
    constructor() {
        this.currentUnit = null;
        this.currentScreen = 'welcome';
        this.currentFlashcardIndex = 0;
        this.currentQuiz = null;
        this.quizState = {
            questions: [],
            currentQuestion: 0,
            score: 0,
            answers: [],
            startTime: null,
            timeLimit: 30
        };
        this.progress = this.loadProgress();
        this.player = null;
        this.currentFlashcards = [];
        this.studyStartTime = Date.now();
        this.totalStudyTime = this.loadStudyTime();
        this.achievements = this.loadAchievements();
    }
    
    loadProgress() {
        const saved = localStorage.getItem('psicometria-progress');
        return saved ? JSON.parse(saved) : {};
    }
    
    saveProgress() {
        localStorage.setItem('psicometria-progress', JSON.stringify(this.progress));
    }
    
    loadStudyTime() {
        const saved = localStorage.getItem('psicometria-study-time');
        return saved ? JSON.parse(saved) : {};
    }
    
    saveStudyTime() {
        localStorage.setItem('psicometria-study-time', JSON.stringify(this.totalStudyTime));
    }
    
    loadAchievements() {
        const saved = localStorage.getItem('psicometria-achievements');
        return saved ? JSON.parse(saved) : [];
    }
    
    saveAchievements() {
        localStorage.setItem('psicometria-achievements', JSON.stringify(this.achievements));
    }
    
    updateUnitProgress(unitId, score, attempts) {
        if (!this.progress[unitId]) {
            this.progress[unitId] = {
                bestScore: 0,
                attempts: 0,
                completed: false,
                lastAttempt: null,
                studyTime: 0
            };
        }
        
        this.progress[unitId].attempts += attempts;
        this.progress[unitId].lastAttempt = Date.now();
        
        if (score > this.progress[unitId].bestScore) {
            this.progress[unitId].bestScore = score;
        }
        
        if (score >= 80) {
            this.progress[unitId].completed = true;
            this.unlockAchievement('Completado', `Has completado ${platformData.units.find(u => u.id === unitId).title}`);
        }
        
        this.saveProgress();
    }
    
    updateStudyTime(unitId, timeSpent) {
        if (!this.totalStudyTime[unitId]) {
            this.totalStudyTime[unitId] = 0;
        }
        this.totalStudyTime[unitId] += timeSpent;
        
        // Actualizar progreso general
        const totalTime = Object.values(this.totalStudyTime).reduce((sum, time) => sum + time, 0);
        if (totalTime >= 3600000) { // 1 hora
            this.unlockAchievement('Estudiante Dedicado', 'Has estudiado m√°s de 1 hora en total');
        }
        
        this.saveStudyTime();
    }
    
    unlockAchievement(title, description) {
        const achievement = {
            id: Date.now(),
            title,
            description,
            timestamp: Date.now()
        };
        
        this.achievements.push(achievement);
        this.saveAchievements();
        this.showAchievement(achievement);
    }
    
    showAchievement(achievement) {
        // Crear y mostrar notificaci√≥n de logro
        const achievementEl = document.createElement('div');
        achievementEl.className = 'achievement-badge show';
        achievementEl.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <i class="fas fa-trophy" style="color: var(--warning-color); font-size: 1.5rem;"></i>
                <div>
                    <div style="font-weight: 600; color: var(--accent-color);">${achievement.title}</div>
                    <div style="font-size: 0.8rem; color: var(--text-secondary);">${achievement.description}</div>
                </div>
            </div>
        `;
        
        document.body.appendChild(achievementEl);
        
        setTimeout(() => {
            achievementEl.classList.remove('show');
            setTimeout(() => {
                document.body.removeChild(achievementEl);
            }, 300);
        }, 3000);
    }
}

// ---------- RENDERIZADOR DE LA PLATAFORMA ----------
class PlatformRenderer {
    constructor(container, state) {
        this.container = container;
        this.state = state;
        this.studyTimer = null;
    }
    
    renderWelcomeScreen() {
        const unitsGrid = document.getElementById('units-grid');
        unitsGrid.innerHTML = '';
        
        // Efecto de escritura para el t√≠tulo
        const typed = new Typed('#hero-title', {
            strings: ['Plataforma de Estudio', 'Psicometr√≠a Aplicada II'],
            typeSpeed: 50,
            backSpeed: 30,
            backDelay: 2000,
            loop: true,
            showCursor: true,
            cursorChar: '|'
        });
        
        platformData.units.forEach((unit, index) => {
            const progress = this.state.progress[unit.id] || {
                bestScore: 0,
                attempts: 0,
                completed: false
            };
            
            const unitCard = document.createElement('div');
            unitCard.className = 'unit-card reveal';
            
            unitCard.innerHTML = `
                <div class="unit-icon">${unit.icon}</div>
                <h3 class="unit-title">${unit.title}</h3>
                <p class="unit-description">${unit.description}</p>
                
                <div class="unit-progress">
                    <div class="progress-bar-container">
                        <div class="progress-bar" style="width: ${progress.bestScore}%"></div>
                    </div>
                    <div class="progress-text">${progress.bestScore}%</div>
                </div>
                
                <div class="difficulty-indicator">
                    <div class="difficulty-dot ${this.getDifficultyLevel(unit.id) === 'easy' ? 'active' : ''}"></div>
                    <div class="difficulty-dot ${this.getDifficultyLevel(unit.id) === 'medium' ? 'medium' : ''}"></div>
                    <div class="difficulty-dot ${this.getDifficultyLevel(unit.id) === 'hard' ? 'hard' : ''}"></div>
                </div>
                
                <div class="unit-actions">
                    <button class="action-btn btn-primary" data-action="study" data-unit="${unit.id}">
                        <i class="fas fa-play"></i>
                        Estudiar
                    </button>
                    <button class="action-btn btn-secondary" data-action="practice" data-unit="${unit.id}">
                        <i class="fas fa-question-circle"></i>
                        Practicar
                    </button>
                </div>
            `;
            
            // Agregar event listeners
            unitCard.querySelector('[data-action="study"]').addEventListener('click', (e) => {
                e.stopPropagation();
                this.startUnitStudy(unit.id);
            });
            
            unitCard.querySelector('[data-action="practice"]').addEventListener('click', (e) => {
                e.stopPropagation();
                this.startUnitPractice(unit.id);
            });
            
            unitCard.addEventListener('click', () => {
                this.openUnit(unit.id);
            });
            
            unitsGrid.appendChild(unitCard);
            
            // Animar con retraso
            setTimeout(() => {
                unitCard.classList.add('active');
            }, index * 200);
        });
        
        // Iniciar timer de estudio
        this.startStudyTimer();
    }
    
    getDifficultyLevel(unitId) {
        const questions = questionBanks[unitId] || [];
        if (questions.length === 0) return 'easy';
        
        const difficulties = questions.map(q => q.difficulty);
        const hardCount = difficulties.filter(d => d === 'hard').length;
        const mediumCount = difficulties.filter(d => d === 'medium').length;
        
        if (hardCount > 0) return 'hard';
        if (mediumCount > 0) return 'medium';
        return 'easy';
    }
    
    startStudyTimer() {
        let startTime = Date.now();
        
        this.studyTimer = setInterval(() => {
            const elapsed = Date.now() - startTime;
            const totalSeconds = Math.floor(elapsed / 1000);
            const hours = Math.floor(totalSeconds / 3600);
            const minutes = Math.floor((totalSeconds % 3600) / 60);
            const seconds = totalSeconds % 60;
            
            document.getElementById('timer-display').textContent = 
                `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }, 1000);
    }
    
    renderUnitScreen(unitId) {
        const unit = platformData.units.find(u => u.id === unitId);
        if (!unit) return;
        
        this.state.currentUnit = unit;
        
        // Actualizar informaci√≥n de la unidad
        document.getElementById('unit-icon-large').textContent = unit.icon;
        document.getElementById('unit-title').textContent = unit.title;
        document.getElementById('unit-description').textContent = unit.description;
        
        // Cargar video de YouTube
        this.loadYouTubeVideo(unit.videoId);
        
        // Cargar flashcards
        this.loadFlashcards(unitId);
        
        // Actualizar estad√≠sticas
        const progress = this.state.progress[unitId] || { bestScore: 0, attempts: 0 };
        document.getElementById('best-score').textContent = `${progress.bestScore}%`;
    }
    
    loadYouTubeVideo(videoId) {
        const container = document.getElementById('video-container');
        container.innerHTML = `
            <iframe 
                id="youtube-player"
                src="https://www.youtube.com/embed/${videoId}?enablejsapi=1&origin=${window.location.origin}&autoplay=1"
                frameborder="0" 
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
                allowfullscreen>
            </iframe>
        `;
        
        // Inicializar reproductor cuando est√© listo
        if (window.YT && window.YT.Player) {
            this.initializeYouTubePlayer();
        } else {
            // Esperar a que la API de YouTube se cargue
            window.onYouTubeIframeAPIReady = () => {
                this.initializeYouTubePlayer();
            };
        }
    }
    
    initializeYouTubePlayer() {
        this.state.player = new YT.Player('youtube-player', {
            events: {
                'onReady': (event) => {
                    console.log('YouTube player ready');
                    // El video se reproduce autom√°ticamente
                }
            }
        });
    }
    
    loadFlashcards(unitId) {
        const flashcards = flashcardData[unitId] || [];
        this.state.currentFlashcards = flashcards;
        this.state.currentFlashcardIndex = 0;
        
        if (flashcards.length > 0) {
            this.renderFlashcard(flashcards[0], 0, flashcards.length);
            this.setupFlashcardNavigation(flashcards);
        } else {
            document.getElementById('flashcard-question').textContent = 'Flashcards no disponibles para esta unidad';
            document.getElementById('flashcard-counter').textContent = '0 / 0';
        }
    }
    
    renderFlashcard(flashcard, index, total) {
        document.getElementById('flashcard-question').textContent = flashcard.front;
        document.getElementById('flashcard-answer').textContent = flashcard.back;
        document.getElementById('flashcard-counter').textContent = `${index + 1} / ${total}`;
        
        // Resetear el estado de la flashcard
        const flashcardElement = document.getElementById('flashcard');
        flashcardElement.classList.remove('flipped');
        
        // Actualizar estado de navegaci√≥n
        document.getElementById('prev-flashcard').disabled = index === 0;
        document.getElementById('next-flashcard').disabled = index === total - 1;
        
        // Animar entrada
        anime({
            targets: flashcardElement,
            opacity: [0, 1],
            scale: [0.8, 1],
            duration: 400,
            easing: 'easeOutBack'
        });
    }
    
    setupFlashcardNavigation(flashcards) {
        // Evento de clic para voltear la flashcard
        const flashcardElement = document.getElementById('flashcard');
        flashcardElement.onclick = () => {
            flashcardElement.classList.toggle('flipped');
        };
        
        // Navegaci√≥n de flashcards
        document.getElementById('prev-flashcard').addEventListener('click', () => {
            if (this.state.currentFlashcardIndex > 0) {
                this.state.currentFlashcardIndex--;
                this.renderFlashcard(
                    flashcards[this.state.currentFlashcardIndex], 
                    this.state.currentFlashcardIndex, 
                    flashcards.length
                );
            }
        });
        
        document.getElementById('next-flashcard').addEventListener('click', () => {
            if (this.state.currentFlashcardIndex < flashcards.length - 1) {
                this.state.currentFlashcardIndex++;
                this.renderFlashcard(
                    flashcards[this.state.currentFlashcardIndex], 
                    this.state.currentFlashcardIndex, 
                    flashcards.length
                );
            }
        });
    }
    
    startUnitStudy(unitId) {
        this.openUnit(unitId);
    }
    
    startUnitPractice(unitId) {
        this.loadQuiz(unitId, 'practice');
    }
    
    openUnit(unitId) {
        document.getElementById('welcome-screen').style.display = 'none';
        document.getElementById('unit-screen').style.display = 'block';
        this.renderUnitScreen(unitId);
        this.state.currentScreen = 'unit';
        
        // Actualizar barra de progreso
        this.updateProgressBar(50);
    }
    
    loadQuiz(unitId, mode) {
        const questions = questionBanks[unitId] || [];
        
        if (questions.length === 0) {
            alert('No hay preguntas disponibles para esta unidad');
            return;
        }
        
        // Seleccionar 15 preguntas aleatorias o todas si hay menos
        const selectedQuestions = this.selectRandomQuestions(questions, Math.min(15, questions.length));
        
        // Configurar el estado del quiz
        this.state.quizState = {
            questions: selectedQuestions,
            currentQuestion: 0,
            score: 0,
            answers: [],
            startTime: Date.now(),
            timeLimit: mode === 'exam' ? 30 : null
        };
        
        this.renderQuizScreen(mode);
    }
    
    selectRandomQuestions(questions, count) {
        const shuffled = [...questions].sort(() => Math.random() - 0.5);
        return shuffled.slice(0, count);
    }
    
    renderQuizScreen(mode) {
        document.getElementById('unit-screen').style.display = 'none';
        
        // Crear pantalla de quiz
        const quizScreen = document.createElement('div');
        quizScreen.id = 'quiz-screen';
        quizScreen.className = 'quiz-screen';
        quizScreen.innerHTML = `
            <div class="quiz-header">
                <div class="quiz-info">
                    <h2 id="quiz-title">${mode === 'exam' ? 'Examen de Unidad' : 'Pr√°ctica de Unidad'}</h2>
                    <div class="quiz-progress-text" id="quiz-progress-text">Pregunta 1 de ${this.state.quizState.questions.length}</div>
                </div>
                ${mode === 'exam' ? `
                    <div class="quiz-timer" id="quiz-timer">
                        <i class="fas fa-hourglass-half"></i>
                        <span id="timer-display">30</span>s
                    </div>
                ` : ''}
            </div>
            
            <div class="quiz-progress">
                <div class="quiz-progress-bar" id="quiz-progress-bar"></div>
            </div>
            
            <div id="quiz-content"></div>
        `;
        
        document.querySelector('.content-wrapper').appendChild(quizScreen);
        
        if (mode === 'practice') {
            quizScreen.querySelector('#quiz-timer').style.display = 'none';
        }
        
        this.renderQuestion();
        
        // Iniciar timer si es modo examen
        if (mode === 'exam') {
            this.startQuizTimer();
        }
    }
    
    startQuizTimer() {
        let timeLeft = this.state.quizState.timeLimit;
        const timerDisplay = document.getElementById('timer-display');
        
        const timer = setInterval(() => {
            timerDisplay.textContent = timeLeft;
            timeLeft--;
            
            if (timeLeft < 0) {
                clearInterval(timer);
                this.handleTimeOut();
            }
        }, 1000);
    }
    
    handleTimeOut() {
        this.selectAnswer('Tiempo agotado');
    }
    
    renderQuestion() {
        const quizState = this.state.quizState;
        const question = quizState.questions[quizState.currentQuestion];
        
        document.getElementById('quiz-progress-text').textContent = 
            `Pregunta ${quizState.currentQuestion + 1} de ${quizState.questions.length}`;
        
        // Actualizar barra de progreso
        const progress = ((quizState.currentQuestion + 1) / quizState.questions.length) * 100;
        document.getElementById('quiz-progress-bar').style.width = `${progress}%`;
        
        // Renderizar la pregunta
        const contentContainer = document.getElementById('quiz-content');
        contentContainer.innerHTML = `
            <div class="question-container">
                <div class="question-text">
                    <span style="font-size: 2rem; margin-right: 15px;">${question.icon || '‚ùì'}</span>
                    ${question.question}
                </div>
                <div class="difficulty-indicator">
                    <div class="difficulty-dot ${question.difficulty === 'easy' ? 'active' : ''}"></div>
                    <div class="difficulty-dot ${question.difficulty === 'medium' ? 'medium' : ''}"></div>
                    <div class="difficulty-dot ${question.difficulty === 'hard' ? 'hard' : ''}"></div>
                </div>
                <div class="answer-options">
                    ${question.options.map((option, index) => `
                        <button class="answer-btn" data-answer="${option}">
                            <div class="answer-option-letter">${String.fromCharCode(65 + index)}</div>
                            <span>${option}</span>
                        </button>
                    `).join('')}
                </div>
            </div>
        `;
        
        // Agregar event listeners a las opciones
        contentContainer.querySelectorAll('.answer-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                this.selectAnswer(btn.dataset.answer);
            });
        });
        
        // Animar entrada
        anime({
            targets: '.question-container',
            opacity: [0, 1],
            translateY: [30, 0],
            duration: 600,
            easing: 'easeOutQuart'
        });
    }
    
    selectAnswer(answer) {
        const quizState = this.state.quizState;
        const question = quizState.questions[quizState.currentQuestion];
        const isCorrect = answer === question.answer;
        
        quizState.answers.push({
            question: question.question,
            userAnswer: answer,
            correctAnswer: question.answer,
            isCorrect: isCorrect,
            explanation: question.explanation,
            difficulty: question.difficulty
        });
        
        if (isCorrect) {
            quizState.score++;
        }
        
        // Mostrar retroalimentaci√≥n
        this.showAnswerFeedback(isCorrect, question);
        
        // Pasar a la siguiente pregunta despu√©s de un breve retraso
        setTimeout(() => {
            this.nextQuestion();
        }, 2000);
    }
    
    showAnswerFeedback(isCorrect, question) {
        // Marcar la respuesta correcta
        document.querySelectorAll('.answer-btn').forEach(btn => {
            if (btn.dataset.answer === question.answer) {
                btn.classList.add('correct');
            } else if (btn.dataset.answer !== question.answer && !isCorrect) {
                btn.classList.add('wrong');
            }
        });
        
        // Mostrar explicaci√≥n
        const feedback = document.createElement('div');
        feedback.className = 'feedback-container show';
        feedback.innerHTML = `
            <div class="feedback-header">
                <i class="fas fa-${isCorrect ? 'check-circle' : 'times-circle'}" style="color: var(--${isCorrect ? 'success' : 'danger'}-color);"></i>
                <strong>${isCorrect ? '¬°Correcto!' : 'Incorrecto'}</strong>
            </div>
            <div class="feedback-content">${question.explanation}</div>
            ${question.source ? `<div class="feedback-source">Fuente: ${question.source}</div>` : ''}
        `;
        
        document.getElementById('quiz-content').appendChild(feedback);
        
        // Deshabilitar todos los botones
        document.querySelectorAll('.answer-btn').forEach(btn => {
            btn.disabled = true;
        });
    }
    
    nextQuestion() {
        const quizState = this.state.quizState;
        
        if (quizState.currentQuestion < quizState.questions.length - 1) {
            quizState.currentQuestion++;
            this.renderQuestion();
        } else {
            this.finishQuiz();
        }
    }
    
    finishQuiz() {
        const quizState = this.state.quizState;
        const score = quizState.score;
        const total = quizState.questions.length;
        const percentage = Math.round((score / total) * 100);
        
        // Actualizar progreso
        this.state.updateUnitProgress(this.state.currentUnit.id, percentage, 1);
        
        // Mostrar pantalla de resultados
        this.showResults(score, total, percentage);
    }
    
    showResults(score, total, percentage) {
        // Remover pantalla de quiz
        const quizScreen = document.getElementById('quiz-screen');
        if (quizScreen) {
            quizScreen.remove();
        }
        
        // Crear pantalla de resultados
        const resultsScreen = document.createElement('div');
        resultsScreen.id = 'results-screen';
        resultsScreen.className = 'results-screen';
        resultsScreen.innerHTML = `
            <h2 class="results-title">¬°Evaluaci√≥n completada!</h2>
            
            <div class="score-display">
                <i class="fas fa-trophy score-icon"></i>
                <span>Tu puntaje: ${score} de ${total} (${percentage}%)</span>
            </div>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <span class="stat-value" id="accuracy-stat">${percentage}%</span>
                    <span class="stat-label">Precisi√≥n</span>
                </div>
                <div class="stat-card">
                    <span class="stat-value" id="time-stat">${this.formatTime(Math.round((Date.now() - this.state.quizState.startTime) / 1000))}</span>
                    <span class="stat-label">Tiempo Total</span>
                </div>
                <div class="stat-card">
                    <span class="stat-value" id="streak-stat">${this.calculateMaxStreak()}</span>
                    <span class="stat-label">Racha M√°xima</span>
                </div>
            </div>
            
            <div class="results-buttons">
                <button class="results-btn btn-primary" id="review-errors-btn">
                    <i class="fas fa-search"></i>
                    Revisar Errores
                </button>
                <button class="results-btn btn-accent" id="download-pdf-btn">
                    <i class="fas fa-file-pdf"></i>
                    Descargar PDF
                </button>
                <button class="results-btn btn-secondary" id="restart-btn">
                    <i class="fas fa-redo"></i>
                    Volver a empezar
                </button>
            </div>
        `;
        
        document.querySelector('.content-wrapper').appendChild(resultsScreen);
        
        // Mostrar recomendaciones si hay errores
        const wrongAnswers = this.state.quizState.answers.filter(a => !a.isCorrect);
        if (wrongAnswers.length > 0) {
            this.showRecommendations(wrongAnswers);
        }
        
        // Configurar botones de resultados
        this.setupResultsButtons();
        
        // Animar estad√≠sticas
        anime({
            targets: '.stat-value',
            innerHTML: [0, (el) => el.textContent],
            duration: 2000,
            easing: 'easeOutQuart',
            round: 1
        });
    }
    
    calculateMaxStreak() {
        let maxStreak = 0;
        let currentStreak = 0;
        
        this.state.quizState.answers.forEach(answer => {
            if (answer.isCorrect) {
                currentStreak++;
                maxStreak = Math.max(maxStreak, currentStreak);
            } else {
                currentStreak = 0;
            }
        });
        
        return maxStreak;
    }
    
    showRecommendations(wrongAnswers) {
        const resultsScreen = document.getElementById('results-screen');
        const recommendationsSection = document.createElement('div');
        recommendationsSection.className = 'recommendations-section';
        recommendationsSection.innerHTML = `
            <h3 class="recommendations-title">
                <i class="fas fa-lightbulb"></i>
                √Åreas para reforzar
            </h3>
            <ul class="recommendations-list" id="recommendations-list"></ul>
        `;
        
        resultsScreen.appendChild(recommendationsSection);
        
        const recommendationsList = document.getElementById('recommendations-list');
        
        // Agrupar errores por categor√≠a
        const errorsByCategory = {};
        wrongAnswers.forEach(answer => {
            const category = answer.category || 'general';
            if (!errorsByCategory[category]) {
                errorsByCategory[category] = [];
            }
            errorsByCategory[category].push(answer);
        });
        
        Object.keys(errorsByCategory).forEach(category => {
            const li = document.createElement('li');
            li.className = 'recommendation-item';
            li.innerHTML = `
                <strong>Reforzar ${category}:</strong> 
                Tienes ${errorsByCategory[category].length} error(es) en esta √°rea.
                <div style="margin-top: 8px; font-size: 0.9rem; color: var(--text-secondary);">
                    ${errorsByCategory[category][0].explanation.substring(0, 100)}...
                </div>
            `;
            recommendationsList.appendChild(li);
        });
    }
    
    setupResultsButtons() {
        // Bot√≥n de revisar errores
        document.getElementById('review-errors-btn').addEventListener('click', () => {
            this.showErrorReview();
        });
        
        // Bot√≥n de descargar PDF
        document.getElementById('download-pdf-btn').addEventListener('click', () => {
            this.downloadResultsPDF();
        });
        
        // Bot√≥n de volver a empezar
        document.getElementById('restart-btn').addEventListener('click', () => {
            this.goBack();
        });
    }
    
    showErrorReview() {
        const wrongAnswers = this.state.quizState.answers.filter(a => !a.isCorrect);
        let reviewHTML = '<h3>Revisi√≥n de Errores</h3>';
        
        wrongAnswers.forEach((error, index) => {
            reviewHTML += `
                <div class="error-card" style="background: var(--bg-card); padding: 20px; margin: 10px 0; border-radius: 8px; border-left: 4px solid var(--danger-color);">
                    <div class="error-question"><strong>Pregunta ${index + 1}:</strong> ${error.question}</div>
                    <div class="error-comparison" style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 10px 0;">
                        <div class="user-answer" style="background: var(--bg-secondary); padding: 10px; border-radius: 4px;"><strong>Tu respuesta:</strong><br>${error.userAnswer}</div>
                        <div class="correct-answer" style="background: var(--bg-secondary); padding: 10px; border-radius: 4px;"><strong>Respuesta correcta:</strong><br>${error.correctAnswer}</div>
                    </div>
                    <div class="error-explanation"><strong>Explicaci√≥n:</strong><br>${error.explanation}</div>
                </div>
            `;
        });
        
        // Crear modal
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.8); z-index: 2000;
            display: flex; align-items: center; justify-content: center;
            padding: 20px;
        `;
        modal.innerHTML = `
            <div style="background: var(--bg-card); padding: 30px; border-radius: 16px; max-width: 800px; max-height: 80vh; overflow-y: auto;">
                ${reviewHTML}
                <button onclick="this.parentElement.parentElement.remove()" style="margin-top: 20px; padding: 10px 20px; background: var(--accent-color); color: white; border: none; border-radius: 8px; cursor: pointer;">
                    Cerrar
                </button>
            </div>
        `;
        
        document.body.appendChild(modal);
    }
    
    downloadResultsPDF() {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF('p', 'mm', 'a4');
        const unit = this.state.currentUnit;
        const quizState = this.state.quizState;
        const score = quizState.score;
        const total = quizState.questions.length;
        const percentage = Math.round((score / total) * 100);
        const date = new Date().toLocaleDateString('es-ES');
        
        // Colores
        const primaryColor = [44, 62, 80];
        const accentColor = [231, 76, 60];
        
        // T√≠tulo
        doc.setFontSize(20);
        doc.setFillColor(...primaryColor);
        doc.rect(0, 0, 210, 40, 'F');
        doc.setTextColor(255, 255, 255);
        doc.text(`Resultados - ${unit.title}`, 20, 25);
        
        // Informaci√≥n b√°sica
        doc.setTextColor(...primaryColor);
        doc.setFontSize(12);
        doc.text(`Fecha: ${date}`, 20, 50);
        doc.text(`Puntaje: ${score} de ${total} (${percentage}%)`, 20, 60);
        doc.text(`Tiempo total: ${this.formatTime(Math.round((Date.now() - quizState.startTime) / 1000))}`, 20, 70);
        
        // Gr√°fico de barras simple
        doc.setFillColor(...accentColor);
        doc.rect(20, 80, percentage * 1.5, 10, 'F');
        doc.setFillColor(240, 240, 240);
        doc.rect(20 + percentage * 1.5, 80, 150 - percentage * 1.5, 10, 'F');
        doc.setTextColor(...primaryColor);
        doc.text(`Progreso: ${percentage}%`, 20, 100);
        
        // Errores
        const wrongAnswers = quizState.answers.filter(a => !a.isCorrect);
        if (wrongAnswers.length > 0) {
            doc.text(`Errores (${wrongAnswers.length}):`, 20, 120);
            
            let y = 130;
            wrongAnswers.forEach((error, i) => {
                if (y > 280) {
                    doc.addPage();
                    y = 20;
                }
                
                doc.setFontSize(10);
                doc.text(`${i + 1}. ${error.question.substring(0, 80)}...`, 20, y);
                doc.text(`Tu respuesta: ${error.userAnswer}`, 20, y + 6);
                doc.text(`Correcta: ${error.correctAnswer}`, 20, y + 12);
                y += 25;
            });
        } else {
            doc.text('¬°No hubo errores! üéâ', 20, 120);
        }
        
        doc.save(`resultados_${unit.id}.pdf`);
    }
    
    formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins}:${secs.toString().padStart(2, '0')}`;
    }
    
    goBack() {
        // Limpiar pantallas
        const quizScreen = document.getElementById('quiz-screen');
        const resultsScreen = document.getElementById('results-screen');
        
        if (quizScreen) quizScreen.remove();
        if (resultsScreen) resultsScreen.remove();
        
        // Mostrar pantalla de inicio
        document.getElementById('welcome-screen').style.display = 'block';
        document.getElementById('unit-screen').style.display = 'none';
        this.state.currentScreen = 'welcome';
        
        // Actualizar barra de progreso
        this.updateProgressBar(0);
    }
    
    updateProgressBar(percentage) {
        const progressFill = document.getElementById('progress-fill');
        progressFill.style.width = `${percentage}%`;
    }
}

// ---------- CONTROLADOR PRINCIPAL ----------
class PlatformController {
    constructor() {
        this.state = new PlatformState();
        this.renderer = new PlatformRenderer(document.body, this.state);
        this.init();
    }
    
    init() {
        this.initializeVantaBackground();
        this.bindEvents();
        this.loadInitialScreen();
        this.initializeScrollAnimations();
    }
    
    initializeVantaBackground() {
        if (typeof VANTA !== 'undefined') {
            VANTA.NET({
                el: "#vanta-bg",
                mouseControls: true,
                touchControls: true,
                gyroControls: false,
                minHeight: 200.00,
                minWidth: 200.00,
                scale: 1.00,
                scaleMobile: 1.00,
                color: 0x6366f1,
                backgroundColor: 0x1a1a1a,
                points: 8.00,
                maxDistance: 25.00,
                spacing: 18.00
            });
        }
    }
    
    initializeScrollAnimations() {
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('active');
                }
            });
        }, observerOptions);
        
        document.querySelectorAll('.reveal').forEach(el => {
            observer.observe(el);
        });
    }
    
    bindEvents() {
        // Navegaci√≥n principal
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                this.navigateToSection(link.dataset.section);
            });
        });
        
        // Bot√≥n de retroceso
        document.getElementById('back-btn').addEventListener('click', () => {
            this.goBack();
        });
        
        // Botones de pr√°ctica y examen
        document.getElementById('practice-btn').addEventListener('click', () => {
            this.renderer.loadQuiz(this.state.currentUnit.id, 'practice');
        });
        
        document.getElementById('quiz-btn').addEventListener('click', () => {
            this.renderer.loadQuiz(this.state.currentUnit.id, 'exam');
        });
    }
    
    loadInitialScreen() {
        this.renderer.renderWelcomeScreen();
    }
    
    navigateToSection(section) {
        // Actualizar navegaci√≥n activa
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        document.querySelector(`[data-section="${section}"]`).classList.add('active');
        
        // Manejar navegaci√≥n
        switch(section) {
            case 'home':
                this.showWelcomeScreen();
                break;
            case 'dashboard':
                this.showDashboard();
                break;
            case 'exam':
                this.showFinalExam();
                break;
            case 'settings':
                this.showSettings();
                break;
        }
    }
    
    showWelcomeScreen() {
        document.getElementById('welcome-screen').style.display = 'block';
        document.getElementById('unit-screen').style.display = 'none';
        this.state.currentScreen = 'welcome';
        this.renderer.renderWelcomeScreen();
    }
    
    showDashboard() {
        // Crear dashboard de progreso
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.8); z-index: 2000;
            display: flex; align-items: center; justify-content: center;
            padding: 20px;
        `;
        
        const completedUnits = Object.keys(this.state.progress).filter(unitId => 
            this.state.progress[unitId].completed
        ).length;
        
        const totalStudyTime = Object.values(this.state.totalStudyTime).reduce((sum, time) => sum + time, 0);
        const hours = Math.floor(totalStudyTime / 3600000);
        const minutes = Math.floor((totalStudyTime % 3600000) / 60000);
        
        modal.innerHTML = `
            <div style="background: var(--bg-card); padding: 30px; border-radius: 16px; max-width: 600px; width: 100%;">
                <h2 style="color: var(--accent-color); margin-bottom: 20px;">Dashboard de Progreso</h2>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
                    <div style="text-align: center; padding: 20px; background: var(--bg-secondary); border-radius: 8px;">
                        <div style="font-size: 2rem; font-weight: bold; color: var(--success-color);">${completedUnits}/${platformData.units.length}</div>
                        <div style="color: var(--text-secondary);">Unidades Completadas</div>
                    </div>
                    <div style="text-align: center; padding: 20px; background: var(--bg-secondary); border-radius: 8px;">
                        <div style="font-size: 2rem; font-weight: bold; color: var(--info-color);">${hours}h ${minutes}m</div>
                        <div style="color: var(--text-secondary);">Tiempo de Estudio</div>
                    </div>
                </div>
                <div style="margin-bottom: 20px;">
                    <h3 style="margin-bottom: 10px;">Logros Desbloqueados:</h3>
                    <div style="max-height: 200px; overflow-y: auto;">
                        ${this.state.achievements.length > 0 ? 
                            this.state.achievements.map(achievement => `
                                <div style="padding: 10px; background: var(--bg-secondary); border-radius: 4px; margin-bottom: 5px; display: flex; align-items: center; gap: 10px;">
                                    <i class="fas fa-trophy" style="color: var(--warning-color);"></i>
                                    <div>
                                        <div style="font-weight: 600;">${achievement.title}</div>
                                        <div style="font-size: 0.8rem; color: var(--text-secondary);">${achievement.description}</div>
                                    </div>
                                </div>
                            `).join('') : 
                            '<p style="color: var(--text-secondary);">No hay logros desbloqueados a√∫n.</p>'
                        }
                    </div>
                </div>
                <button onclick="this.parentElement.parentElement.remove()" style="padding: 10px 20px; background: var(--accent-color); color: white; border: none; border-radius: 8px; cursor: pointer;">
                    Cerrar
                </button>
            </div>
        `;
        
        document.body.appendChild(modal);
    }
    
    showFinalExam() {
        alert('Examen final integrador - Pr√≥ximamente disponible');
    }
    
    showSettings() {
        // Crear modal de configuraci√≥n
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(0,0,0,0.8); z-index: 2000;
            display: flex; align-items: center; justify-content: center;
            padding: 20px;
        `;
        
        modal.innerHTML = `
            <div style="background: var(--bg-card); padding: 30px; border-radius: 16px; max-width: 400px; width: 100%;">
                <h2 style="color: var(--accent-color); margin-bottom: 20px;">Configuraci√≥n</h2>
                <div style="margin-bottom: 20px;">
                    <label style="display: block; margin-bottom: 10px;">Modo Oscuro:</label>
                    <button id="theme-toggle" style="padding: 10px 20px; background: var(--info-color); color: white; border: none; border-radius: 8px; cursor: pointer;">
                        ${document.body.getAttribute('data-theme') === 'dark' ? 'Desactivar' : 'Activar'}
                    </button>
                </div>
                <div style="margin-bottom: 20px;">
                    <label style="display: block; margin-bottom: 10px;">Restablecer Progreso:</label>
                    <button id="reset-progress" style="padding: 10px 20px; background: var(--danger-color); color: white; border: none; border-radius: 8px; cursor: pointer;">
                        Restablecer
                    </button>
                </div>
                <button onclick="this.parentElement.parentElement.remove()" style="padding: 10px 20px; background: var(--text-muted); color: white; border: none; border-radius: 8px; cursor: pointer;">
                    Cerrar
                </button>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Configurar botones del modal
        modal.querySelector('#theme-toggle').addEventListener('click', () => {
            const currentTheme = document.body.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            document.body.setAttribute('data-theme', newTheme);
            modal.querySelector('#theme-toggle').textContent = newTheme === 'dark' ? 'Desactivar' : 'Activar';
            localStorage.setItem('theme', newTheme);
        });
        
        modal.querySelector('#reset-progress').addEventListener('click', () => {
            if (confirm('¬øEst√°s seguro de que quieres restablecer todo el progreso?')) {
                localStorage.removeItem('psicometria-progress');
                localStorage.removeItem('psicometria-study-time');
                localStorage.removeItem('psicometria-achievements');
                location.reload();
            }
        });
    }
    
    goBack() {
        if (this.state.currentScreen === 'unit') {
            this.showWelcomeScreen();
        } else if (this.state.currentScreen === 'quiz') {
            this.renderer.closeQuiz();
        } else if (this.state.currentScreen === 'results') {
            this.renderer.goBack();
        }
    }
}

// ---------- INICIALIZAR APLICACI√ìN ----------
document.addEventListener('DOMContentLoaded', () => {
    // Cargar tema guardado
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
        document.body.setAttribute('data-theme', savedTheme);
    }
    
    new PlatformController();
});